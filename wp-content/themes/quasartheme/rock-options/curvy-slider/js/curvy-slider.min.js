(function() {
  function za() {
    document.getElementById("wayNameHolder").getAttribute("curvyWayDir");
    ha = document.getElementById("wayNameHolder").getAttribute("curvyWayUri");
    R = document.getElementById("curvy-data").getAttribute("sliderName");
    S = document.getElementById("curvy-data").getAttribute("sliderDBName");
    document.getElementById("wayNameHolder").getAttribute("way");
    m = JSON.parse(document.getElementById("curvy-data").innerHTML);
    n = JSON.parse(document.getElementById("google-fonts-holder").innerHTML);
    b = [];
    var c = m.fonts ? m.fonts : [];
    if (0 < c.length) {
      for (var a = 0;a < c.length;a++) {
        T.push(c[a]);
      }
      try {
        WebFont.load({google:{families:T}, fontactive:function(a, b) {
          ia++;
          ia >= T.length && !U && (U = !0, ja());
        }});
      } catch (e) {
      }
    } else {
      U = !0, ja();
    }
  }
  function ja() {
    for (var b = [], a = 0;a < m.scenes.length && "undefined" != typeof m.scenes[a].imageArray;a++) {
      for (var c = 0;c < m.scenes[a].imageArray.length;c++) {
        b.push({id:m.scenes[a].imageArray[c].id, url:m.scenes[a].imageArray[c].url});
      }
      m.scenes[a].imageArray = [];
    }
    if (0 < b.length) {
      a = new CAAT.Module.Preloader.Preloader;
      for (c = 0;c < b.length;c++) {
        a.addElement(b[c].id, b[c].url);
      }
      var g = !1;
      a.cerrored = function() {
        g || (g = !0, alert("One or more of your image files can not be loaded. Make sure your image url is correct and image exists"), V());
      };
      a.load(function(a, b, c) {
        V(a);
      });
    } else {
      V();
    }
  }
  function Aa() {
    R = jQuery("#current_slider_name").val();
    for (var c = Ba(), c = {id:S.replace("curvy_slider_", ""), fonts:c, animationName:R, sliderDBName:S, scenes:[]}, a = 0;a < b.length;a++) {
      var e = b[a], g = {actorElems:[], bg:{}};
      g.bg.bgType = b[a].bg.bgType;
      g.bg.bgURL = b[a].bg.bgURL;
      g.bg.bgColor = b[a].bg.bgColor;
      g.sceneDetails = {};
      g.sceneDetails.sceneTime = b[a].sceneDetails.sceneTime;
      g.sceneDetails.sceneDelay = b[a].sceneDetails.sceneDelay;
      g.sceneDetails.incomingMotion = b[a].sceneDetails.incomingMotion;
      g.sceneDetails.incomingAnchor = b[a].sceneDetails.incomingAnchor;
      g.sceneDetails.incomingEasing = b[a].sceneDetails.incomingEasing;
      g.sceneDetails.fallbackURL = b[a].sceneDetails.fallbackURL;
      g.imageArray = b[a].imageArray;
      for (var h = 0;h < e.actorElems.length;h++) {
        var k = {}, f = e.actorElems[h].path.numControlPoints();
        k.coordsArray = [];
        for (var W = 0;W < f;W++) {
          k.coordsArray.push(e.actorElems[h].path.getControlPoint(W));
        }
        k.delayTime = parseInt(e.actorElems[h].delayTime);
        k.motionTime = parseInt(e.actorElems[h].motionTime);
        k.objType = e.actorElems[h].objType;
        k.objText = e.actorElems[h].objText;
        k.fontStyle = e.actorElems[h].fontStyle;
        k.objSrc = e.actorElems[h].objSrc;
        k.linkActive = e.actorElems[h].linkActive;
        k.objLink = e.actorElems[h].objLink;
        k.objBorderColor = e.actorElems[h].objBorderColor;
        k.objBGColor = e.actorElems[h].objBGColor;
        k.paddingH = e.actorElems[h].paddingH;
        k.paddingV = e.actorElems[h].paddingV;
        k.bgRadius = e.actorElems[h].bgRadius;
        k.objColor = e.actorElems[h].objColor;
        k.objFontSize = e.actorElems[h].objFontSize;
        k.objFont = e.actorElems[h].objFont;
        k.elemID = e.actorElems[h].elemID;
        k.autoRotate = e.actorElems[h].autoRotate;
        k.hideBeginning = e.actorElems[h].hideBeginning;
        k.easingName = e.actorElems[h].easingName;
        k.startAlpha = e.actorElems[h].startAlpha;
        k.endAlpha = e.actorElems[h].endAlpha;
        k.outOfSceneTime = e.actorElems[h].outOfSceneTime;
        k.waitOnSceneTime = e.actorElems[h].waitOnSceneTime;
        k.outOfSceneMotion = e.actorElems[h].outOfSceneMotion;
        k.scaleStart = e.actorElems[h].scaleStart;
        k.scaleEnd = e.actorElems[h].scaleEnd;
        g.actorElems.push(k);
      }
      c.scenes.push(g);
    }
    return c;
  }
  function Ca() {
    var d = c;
    for (c = c = 0;c < b.length;c++) {
      var a = "#" + b[c].theSceneID;
      jQuery(a + " .save-current-scene-details").trigger("click");
      jQuery(a + " .save-current-anim-element").trigger("click");
    }
    c = d;
  }
  function Ba() {
    var b = [];
    jQuery(".fontDataHolder").each(function() {
      if ("undefined" != typeof jQuery(this).attr("fontdata") && null != jQuery(this).attr("fontdata") && "sans" != jQuery(this).attr("fontdata") && "" != jQuery(this).attr("fontdata")) {
        for (var a = !1, c = 0;c < b.length;c++) {
          b[c] == jQuery(this).attr("fontdata") && (a = !0);
        }
        a || b.push(jQuery(this).attr("fontdata"));
      }
    });
    return b;
  }
  function y(b, a) {
    jQuery(b).find("option").each(function() {
      jQuery(this).attr("element") == a && jQuery(this).attr("selected", "selected");
    });
  }
  function ka(d) {
    var a = M(), e = '<input autocomplete="off" type="text" id="colorpicker-' + a + '" value="' + (b[c].bg.bgColor ? b[c].bg.bgColor : "#FFFFFF") + '" class="my-color-field" data-default-color="' + (b[c].bg.bgColor ? b[c].bg.bgColor : "#FFFFFF") + '" />', g = d.split("-"), h = q(), k = q(), e = '<div class="hidden scene-elem" id="' + d + '"><div class="elementHolder meta-box-sortables ui-sortable metabox-holder wrap"></div><div class="wrap"><div class="background-setting-canvas"><div style="background:#EEEEEE;"><strong style="padding:15px; display:block;">Scene Settings</strong></div><div class="background-settings"><div class="row"><div class="large-4 columns" style="overflow:visible;"><div class="scene-bg-color-holder"><strong>Background Color : </strong><br/>' + 
    e + '</div><br/><div class="image_nocode_container"><label for="upload_image"> <input autocomplete="off" id="fallback-image-id-' + d + '" placeholder="Fallback Image (For older browsers)" class="upload_image_button" size="36" name="upload_image" type="text" value="' + ("undefined" !== typeof b[c].sceneDetails.fallbackURL ? b[c].sceneDetails.fallbackURL : "") + '" /> <input autocomplete="off" class="image_uploader_class button" value="Upload Image" type="button" /> </label></div><br/><div class="image_nocode_container"><label for="upload_image"> <input autocomplete="off" id="background-image-id-' + 
    d + '" placeholder="Background Image" class="upload_image_button" size="36" name="upload_image" type="text" value="' + ("image" == b[c].bg.bgType ? b[c].bg.bgURL : "") + '" /> <input autocomplete="off" class="image_uploader_class button" value="Upload Image" type="button" /> </label></div><br/></div><div class="large-3 columns"><strong><span>Scene Transition Time : </span><span class="current-scene-time ">' + (b[c].sceneDetails ? b[c].sceneDetails.sceneTime : .65) + '</span></strong><br/><div id="' + 
    h + '" class="ui-slider-no-conflict"></div><br/><strong><span>Scene Delay Time : </span><span class="current-scene-delay ">' + (b[c].sceneDetails ? b[c].sceneDetails.sceneDelay : 6) + '</span></strong><br/><div id="' + k + '" class="ui-slider-no-conflict"></div><br/></div><div class="large-4 columns"><div class="row"><div class="large-6 columns"><strong>Scene Easing : </strong></div><div class="large-6 columns"><select class="scene-incoming-easing"><option element="easeOut">easeOut</option><option element="easeIn">easeIn</option><option element="easeInOut">easeInOut</option><option element="bounce">Bounce</option><option element="linear">Linear</option></select></div></div><br/><div class="row"><div class="large-6 columns"><strong>Scene Incoming Motion : </strong></div><div class="large-6 columns"><select class="scene-incoming-motion"><option element="0">Slide</option><option element="1">Rotate</option><option element="2">Scale</option></select></div></div><br/><div class="row"><div class="large-6 columns"><strong>Scene Incoming Anchor : </strong></div><div class="large-6 columns"><select class="scene-incoming-anchor"><option element="0">Center</option><option element="1">Top</option><option element="2">Bottom</option><option element="3">Left</option><option element="4">Right</option><option element="5">Top Left</option><option element="6">Top Right</option><option element="7">Bottom Left</option><option element="8">Bottom Right</option></select></div></div></div><div class="large-1 columns"></td></div><div class=""><div class="large-12 columns"><a class="a_no_link save-current-scene-details" sceneBind="' + 
    d + '" elementBind="' + a + '" urlBind="background-image-id-' + d + '" fallbackBind="fallback-image-id-' + d + '">Update Background</a> | <a class="a_no_link reset-current-scene-bg" elementBind="' + a + '">Transparent Background</a></div></div></div></div></div></div>';
    jQuery("#scenes-holder").append(e);
    jQuery("#colorpicker-" + a).wpColorPicker();
    Da([{id:h, defaultVal:b[c].sceneDetails ? b[c].sceneDetails.sceneTime : .65}]);
    Ea([{id:k, defaultVal:b[c].sceneDetails ? b[c].sceneDetails.sceneDelay : 6}]);
    y("#" + d + " .scene-incoming-motion", b[c].sceneDetails ? b[c].sceneDetails.incomingMotion : 0);
    y("#" + d + " .scene-incoming-anchor", b[c].sceneDetails ? b[c].sceneDetails.incomingAnchor : 0);
    y("#" + d + " .scene-easing-type", b[c].sceneDetails ? b[c].sceneDetails.sceneEasing : "easeOut");
    d = '<li id="scene-nav-' + g[1] + '" class="scene-nav-elem active" ref="scene-' + g[1] + '"><i class="drag fa fa-move"></i> <i class="fa fa-film"></i><span> Scene ' + g[1] + '</span><span class="remove-scene-container"><i class="fa fa-times remove-current-scene" scenebind="scene-' + g[1] + '"></i></span></li>';
    jQuery("#scenes-navigation ul li.add-new-scene-btn").before(d);
    D(b.length - 1);
  }
  function D(d) {
    if (!(d >= b.length)) {
      l.easeInOut(d, b[d].sceneDetails.incomingMotion, b[d].sceneDetails.incomingAnchor, c, b[c].sceneDetails.incomingMotion, b[c].sceneDetails.incomingAnchor, 1E3 * b[c].sceneDetails.sceneTime, 1, u(b[d].sceneDetails.incomingEasing), u(b[c].sceneDetails.incomingEasing));
      for (var a = 0;a < b.length;a++) {
        jQuery("#" + b[a].theSceneID).hasClass("hidden") || jQuery("#" + b[a].theSceneID).addClass("hidden");
      }
      c = d;
      b[c] && 0 < jQuery("#" + b[c].theSceneID).length && jQuery("#" + b[c].theSceneID).removeClass("hidden");
      jQuery("#scenes-navigation ul li.scene-nav-elem.active").removeClass("active");
      jQuery("#scene-nav-" + d).addClass("active");
    }
  }
  function E(d, a, e) {
    d = (d = "undefined" === typeof d || null == d ? null : d) ? (new CAAT.PathUtil.Path).beginPath(parseInt(d[0].x), parseInt(d[0].y)).addQuadricTo(parseInt(d[1].x), parseInt(d[1].y), parseInt(d[2].x), parseInt(d[2].y)).endPath() : (new CAAT.PathUtil.Path).beginPath(r / 2 + t, p + p / 3).addQuadricTo(r / 2 + t - 50, p / 3 * 7, r / 8 * 3, 2 * p).endPath();
    b[c].path.addSegment(d);
    b[c].pa.setPath(b[c].path);
    a && b[c].pa.setOnUpdateCallback(function(a) {
      for (a = 0;a < b[c].actorElems.length;a++) {
        b[c].actorElems[a].Actor.setLocation(b[c].actorElems[a].path.getControlPoint(2).x, b[c].actorElems[a].path.getControlPoint(2).y), jQuery("#" + b[c].actorElems[a].elemID + " .x1").val(parseInt(b[c].actorElems[a].path.getControlPoint(0).x)), jQuery("#" + b[c].actorElems[a].elemID + " .y1").val(parseInt(b[c].actorElems[a].path.getControlPoint(0).y)), jQuery("#" + b[c].actorElems[a].elemID + " .x2").val(parseInt(b[c].actorElems[a].path.getControlPoint(1).x)), jQuery("#" + b[c].actorElems[a].elemID + 
        " .y2").val(parseInt(b[c].actorElems[a].path.getControlPoint(1).y)), jQuery("#" + b[c].actorElems[a].elemID + " .x3").val(parseInt(b[c].actorElems[a].path.getControlPoint(2).x)), jQuery("#" + b[c].actorElems[a].elemID + " .y3").val(parseInt(b[c].actorElems[a].path.getControlPoint(2).y));
      }
    });
    return d;
  }
  function Fa(d, a, e) {
    for (var g = 0;g < a.length;g++) {
    }
    for (var h = 0;h < b[c].path.pathSegments.length;h++) {
      if (b[c].path.pathSegments[h] == d.path) {
        for (var k = d.path.numControlPoints(), f = [], g = 0;g < k;g++) {
          f.push(d.path.getControlPoint(g));
        }
        for (g = 0;g < f.length;g++) {
        }
        b[c].path.pathSegments.splice(h, 1);
        break;
      }
    }
    d.path = (new CAAT.PathUtil.Path).beginPath(a[0], a[1]).addQuadricTo(a[2], a[3], a[4], a[5]).endPath();
    for (a = 0;a < d.path.numControlPoints();a++) {
      d.coordsArray.push(d.path.getControlPoint(a));
    }
    b[c].path.addSegment(d.path);
    b[c].pa.setPath(b[c].path);
    d.Actor.setLocation(parseInt(jQuery("#" + e + " .x3").val()), parseInt(jQuery("#" + e + " .y3").val()));
    b[c].pa.setOnUpdateCallback(function(a) {
      for (a = 0;a < b[c].actorElems.length;a++) {
        b[c].actorElems[a].Actor.setLocation(b[c].actorElems[a].path.getControlPoint(2).x, b[c].actorElems[a].path.getControlPoint(2).y), jQuery("#" + b[c].actorElems[a].elemID + " .x1").val(parseInt(b[c].actorElems[a].path.getControlPoint(0).x)), jQuery("#" + b[c].actorElems[a].elemID + " .y1").val(parseInt(b[c].actorElems[a].path.getControlPoint(0).y)), jQuery("#" + b[c].actorElems[a].elemID + " .x2").val(parseInt(b[c].actorElems[a].path.getControlPoint(1).x)), jQuery("#" + b[c].actorElems[a].elemID + 
        " .y2").val(parseInt(b[c].actorElems[a].path.getControlPoint(1).y)), jQuery("#" + b[c].actorElems[a].elemID + " .x3").val(parseInt(b[c].actorElems[a].path.getControlPoint(2).x)), jQuery("#" + b[c].actorElems[a].elemID + " .y3").val(parseInt(b[c].actorElems[a].path.getControlPoint(2).y));
      }
    });
  }
  function la(d, a) {
    for (var e = 0;e < b[c].path.pathSegments.length;e++) {
      if (b[c].path.pathSegments[e] == d.path) {
        b[c].path.pathSegments.splice(e, 1);
        break;
      }
    }
    b[c].pa.setPath(b[c].path);
  }
  function V(d) {
    jQuery(".loader-container").length && jQuery(".loader-container").remove();
    l = (new CAAT.Foundation.Director).initialize(r + 2 * t, v + 2 * p, "experiment-canvas");
    l.enableResizeEvents(CAAT.Foundation.Director.RESIZE_PROPORTIONAL);
    l.setImagesCache(d);
    Ga();
    ma = (new CAAT.PathUtil.Path).endPath();
    (new CAAT.Foundation.UI.PathActor).enableEvents(!0).setBounds(0, 0, l.width, l.height).setInteractive(!0).setPath(ma).showBoundingBox(!1);
    Ha();
    0 < b.length || na();
    CAAT.loop(30);
    jQuery(function() {
      jQuery(".ui-sortable").sortable({placeholder:"sortable-placeholder", handle:".handle", stop:function(a, d) {
        for (var g = d.item.attr("id"), h = d.item.index(), k = 0, f, k = 0;k < b[c].actorElems.length;k++) {
          if (b[c].actorElems[k].elemID == g) {
            f = b[c].actorElems[k];
            b[c].actorElems.splice(k, 1);
            break;
          }
        }
        b[c].actorElems.splice(h, 0, f);
        for (k = 0;k < b[c].theScene.childrenList.length;k++) {
          if (b[c].theScene.childrenList[k] == f.Actor) {
            b[c].theScene.childrenList.splice(k, 1);
            break;
          }
        }
        b[c].theScene.addChildAt(f.Actor, h + 1);
      }});
    });
    jQuery("#scenes-navigation ul").sortable({handle:"i.drag", stop:function(a, b) {
      Ia(a, b);
    }});
    jQuery(".elementHolder .postbox .inside").css("display", "none");
    jQuery(window).trigger("resize");
  }
  function Ia(c, a) {
    var e = parseInt(a.item.attr("ref").toString().replace("scene-", "")), g = a.item.index(), h = b[e], k = l.scenes[e];
    b.splice(e, 1);
    b.splice(g, 0, h);
    l.scenes.splice(e, 1);
    l.scenes.splice(g, 0, k);
    var f = 0, f = 0;
    jQuery(".scene-nav-elem").each(function() {
      parseInt(jQuery(this).attr("ref").toString().replace("scene-", ""));
      jQuery(this).attr("id", "scene-nav-" + f);
      jQuery(this).attr("ref", "scene-" + f);
      jQuery(this).find("span:not(.remove-scene-container)").html(" Scene " + f);
      f++;
    });
    D(0);
    for (e = 0;e < b.length;e++) {
    }
  }
  function na() {
    c = b.length;
    b[c] = {};
    b[c].theScene = l.createScene();
    b[c].theSceneID = "scene-" + c;
    b[c].path = (new CAAT.PathUtil.Path).endPath();
    b[c].pa = (new CAAT.Foundation.UI.PathActor).setBounds(0, 0, l.width, l.height).setInteractive(!0).setPath(b[c].path).showBoundingBox(!1);
    b[c].bg = {};
    b[c].bg.bgActor = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, p).setSize(r, v);
    b[c].theScene.addChildAt(b[c].bg.bgActor, 0);
    b[c].imageArray = [];
    b[c].sceneDetails = {};
    b[c].sceneDetails.sceneTime = .65;
    b[c].sceneDetails.sceneDelay = 6;
    b[c].sceneDetails.incomingMotion = 0;
    b[c].sceneDetails.incomingAnchor = 0;
    b[c].sceneDetails.incomingEasing = "easeOut";
    ka(b[c].theSceneID);
    b[c].actorElems = [];
    b[c].theScene.addChild(b[c].pa);
    jQuery("#scene-" + c).removeClass("hidden");
  }
  function Ja(d) {
    jQuery("#scene-" + d).remove();
    jQuery("#scene-nav-" + d).remove();
    b.splice(d, 1);
    l.scenes.splice(d, 1);
    jQuery(".scene-elem").each(function(a) {
      jQuery(this).attr("id", "scene-" + a);
      b[a].theSceneID = "scene-" + a;
      jQuery(this).find(".save-current-scene-details").attr("sceneBind", "scene-" + a);
      parseInt(jQuery(this).attr("id").toString().replace("scene-", ""));
    });
    jQuery(".scene-nav-elem").each(function(a) {
      jQuery(this).attr("id", "scene-nav-" + a);
      jQuery(this).attr("ref", "scene-" + a);
      jQuery(this).find("span:not(.remove-scene-container)").html(" Scene " + a);
      jQuery(this).find(".remove-scene-container .remove-current-scene").attr("scenebind", "scene-" + a);
      parseInt(jQuery(this).attr("id").toString().replace("scene-nav-", ""));
    });
    for (var a = 0;a < b.length;a++) {
    }
    d = parseInt(d);
    c = 0;
    0 <= d - 1 ? D(d - 1) : d + 1 < b.length ? D(d + 1) : c = d;
  }
  function Ha() {
    2 < m.length && m.splice(2, 1);
    for (var d = c = 0;d < m.scenes.length;d++) {
      var a = m.scenes[d];
      b[c] = {};
      b[c].theScene = l.createScene();
      b[c].path = (new CAAT.PathUtil.Path).endPath();
      b[c].pa = (new CAAT.Foundation.UI.PathActor).setBounds(0, 0, l.width, l.height).setInteractive(!0).setPath(b[c].path).showBoundingBox(!1);
      b[c].imageArray = "undefined" != typeof m.scenes[d].imageArray ? m.scenes[d].imageArray : [];
      b[c].bg = {};
      b[c].bg.bgType = m.scenes[d].bg.bgType;
      b[c].bg.bgURL = m.scenes[d].bg.bgURL;
      b[c].bg.bgColor = m.scenes[d].bg.bgColor;
      "image" == b[c].bg.bgType ? (b[c].bg.bgActor = (new CAAT.Foundation.ActorContainer).setBounds(0, 0, l.width, l.height).setSize(r, v).centerAt((r + 2 * t) / 2, (v + 2 * p) / 2), b[c].theScene.addChildAt(b[c].bg.bgActor, 0), H(b[c].bg.bgActor, b[c].theSceneID, b[c].bg.bgURL)) : (b[c].bg.bgActor = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, p).setSize(r, v), b[c].theScene.addChildAt(b[c].bg.bgActor, 0), "color" == b[c].bg.bgType && b[c].bg.bgActor.setFillStyle(b[c].bg.bgColor));
      b[c].sceneDetails = {};
      b[c].sceneDetails.sceneTime = m.scenes[d].sceneDetails.sceneTime;
      b[c].sceneDetails.sceneDelay = m.scenes[d].sceneDetails.sceneDelay;
      b[c].sceneDetails.incomingMotion = m.scenes[d].sceneDetails.incomingMotion;
      b[c].sceneDetails.incomingAnchor = m.scenes[d].sceneDetails.incomingAnchor;
      b[c].sceneDetails.incomingEasing = m.scenes[d].sceneDetails.incomingEasing;
      b[c].sceneDetails.fallbackURL = m.scenes[d].sceneDetails.fallbackURL;
      b[c].theSceneID = "scene-" + c;
      ka(b[c].theSceneID);
      b[c].actorElems = [];
      for (var e = 0;e < a.actorElems.length;e++) {
        switch(a.actorElems[e].objType) {
          case "singleText":
            F(w, a.actorElems[e]);
            break;
          case "singleBoxedText":
            X(w, a.actorElems[e]);
            break;
          case "image":
            Y(w, a.actorElems[e]);
            break;
          case "button":
            break;
          default:
            F(w);
        }
      }
      b[c].theScene.addChild(b[c].pa);
      c++;
    }
    c = b.length - 1;
    jQuery("#scene-" + c).removeClass("hidden");
  }
  function Ga() {
    Z = (new CAAT.Foundation.Director).initialize(r + 2 * t, v + 2 * p, "experiment-canvas-bg");
    Z.enableResizeEvents(CAAT.Foundation.Director.RESIZE_PROPORTIONAL);
    var b = Z.createScene();
    oa = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).setStrokeStyle("#c4c4c4").centerAt(t, p).setSize(r, v);
    var a = (new CAAT.Foundation.ActorContainer).setBounds(0, 0, l.width, l.height);
    H(a, "outerCanvas-bg-img", ha + "images/background-container-bg.jpg");
    b.addChild(a);
    b.addChild(oa);
  }
  function pa(b) {
    for (var a in b) {
      this[a] = "source" == typeof b[a] ? new pa(b[a]) : b[a];
    }
  }
  function F(d, a) {
    var e = (a = "undefined" === typeof a || null == a ? null : a) ? a.elemID : N(), g = M(), h = q(), k = q(), l = q(), m = q(), n = q(), r = q(), p = q(), t = qa(), v = '<div class="postbox no-margin" id="' + e + '"><div class="handlediv" title="Click to toggle"><br /></div><h3 class="handle"><input autocomplete="off" class="elem_checked_for_edit" elementBind="' + e + '" type="checkbox"> <span>' + (a ? a.objText : "New Text") + '</span></h3><div class="inside curvy-element-settings-container"><div><div class="row" style="margin:0px -10px; width:auto;"><div class="large-6 columns element_tabs_link_container"><a class="a_no_link text_typography_settings-button">Text and Typography</a> | <a class="a_no_link animation_settings-button">Animation Details</a> | <a class="a_no_link coords_settings-button">Coordinates</a></div><div class="large-6 columns element_play_save_duplicate" style="text-align:right;"><a class="a_no_link remove-element removediv" elementBind="' + 
    e + '"><i class="fa fa-times"></i> Delete</a> | <a class="a_no_link duplicate-current-anim-element" elementBind="' + e + '"><i class="fa fa-copy"></i> Duplicate</a> | <a class="a_no_link save-current-anim-element" elementBind="' + e + '"><i class="icon-save"></i> Save Element</a> | <a class="a_no_link play-current-anim-element" elementBind="' + e + '"><i class="fa fa-play"></i> Play Element</a></div></div><div class="code-br"></div><div class="row text_typography_settings element_settings_tab"><h3>Text and Typography Settings</h3><div class="row"><div class="large-3 columns"><h4>Enter Your Text : </h4><input autocomplete="off" class="input-xlarge pull-left text-holder" type="text" value="' + 
    (a ? a.objText : "New Text") + '" ></div><div class="large-3 columns"><h4>Text Font : </h4><input autocomplete="off" class="fontDataHolder" id="' + t + '" type="text" fontData="" /></div><div class="large-2 columns"><h4>Font Size : <span class="current-font-size ">' + (a ? a.objFontSize : "40px") + '</span></h4><div id="' + h + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Font Color : </h4><input autocomplete="off" type="text" id="' + g + '" value="' + (a ? a.objColor : 
    "#3e3e3e") + '" class="my-color-field" data-default-color="' + (a ? a.objColor : "#3e3e3e") + '" /></div></div><div class="row"><div class="large-2 columns"><h4>Font Style</h4><select class="pull-left fontStyle span2"><option element="normal">Regular</option><option element="bold">Bold</option><option element="italic">Italic</option><option element="bold italic">Bold + Italic</option><option element="100">100</option><option element="200">200</option><option element="300">300</option><option element="400">400</option><option element="500">500</option><option element="600">600</option><option element="700">700</option><option element="800">800</option></select></div><div class="large-3 columns"><h4><label class="checkbox link-checkbox"><input autocomplete="off" type="checkbox" value=""> Activate Linking</label></h4><div class="code-br"></div><span class="input-xlarge uneditable-input" style="max-width:255px;"></span></div><div class="large-7 columns"></div></div></div><div class="row animation_settings element_settings_tab hide"><h3>Animation Details</h3><div class="row"><div class="large-2 columns"><h4>Motion Time : <span class="current-time ">' + 
    (a ? parseInt(a.motionTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + l + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Delay Time : <span class="current-delay ">' + (a ? parseInt(a.delayTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + k + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Easing</h4><select class="pull-left add-animation-easing"><option element="easeOut">easeOut</option><option element="easeIn">easeIn</option><option element="easeInOut">easeInOut</option><option element="bounce">Bounce</option><option element="linear">Linear</option></select></div><div class="large-2 columns"><h4>Alpha Start : <span class="current-start-alpha ">' + 
    (a ? a.startAlpha : 1) + '</span></h4><div id="' + m + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Alpha End : <span class="current-end-alpha ">' + (a ? a.endAlpha : 1) + '</span></h4><div id="' + n + '" class="ui-slider-no-conflict"></div></div><div class="large-1 columns"><h4>Hide</h4><label class="checkbox hideElemBeginning"><input autocomplete="off" type="checkbox" value="">Hide At Beginning</label></div><div class="large-1 columns"><h4>Rotate</h4><label class="checkbox autoRotate"><input autocomplete="off" type="checkbox" value="">Auto Rotate</label></div></div><div class="row"><div class="large-2 columns"><h4>Wait on scene : <span class="current-wait-time">' + 
    (a ? a.waitOnSceneTime / 1E3 : 3) + '</span></h4><div id="' + r + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Out of scene motion time : <span class="current-out-time">' + (a ? a.outOfSceneTime / 1E3 : .65) + '</span></h4><div id="' + p + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Out of Scene Motion</h4><select class="pull-left outOfSceneMotion span2"><option element="noMotion">No Motion</option><option element="toRight">To Right</option><option element="toLeft">To Left</option><option element="toTop">To Top</option><option element="toBottom">To Bottom</option><option element="alpha">Alpha</option></select></div><div class="large-1 columns"></div></div></div><div class="row coords_settings element_settings_tab hide"><h3>Coordinates</h3><div class="row"><div class="large-2 columns"><h4>Start X : </h4><input autocomplete="off" class="input-small pull-left text-holder x1" type="text" value="' + 
    (a ? parseInt(a.coordsArray[0].x) : 1150) + '"><br /><h4>Start Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y1" type="text" value="' + (a ? parseInt(a.coordsArray[0].y) : 219) + '"></div><div class="large-2 columns"><h4>Curve X : </h4><input autocomplete="off" class="input-small pull-left text-holder x2" type="text" value="' + (a ? parseInt(a.coordsArray[1].x) : 1130) + '"><br /><h4>Curve Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y2" type="text" value="' + 
    (a ? parseInt(a.coordsArray[1].y) : 350) + '"><br /></div><div class="large-2 columns"><h4>End X : </h4><input autocomplete="off" class="input-small pull-left text-holder x3" type="text" value="' + (a ? parseInt(a.coordsArray[2].x) : 780) + '"><br /><h4>End Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y3" type="text" value="' + (a ? parseInt(a.coordsArray[2].y) : 280) + '"><br /></div><div class="large-2 columns"><h4>Start Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-start" type="text" value="' + 
    (a ? a.scaleStart : 1) + '"><br /><h4>End Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-end" type="text" value="' + (a ? a.scaleEnd : 1) + '"><br /></div><div class="large-2 columns"><div style="height:50px;"></div><div class="button setCoordsBtn" elementBind="' + e + '"><i class="icon-level-up"></i> Update Coords</div></div><div class="large-2 columns"></div></div></div></div></div></div>';
    jQuery("#" + b[c].theSceneID + " .elementHolder").append(v);
    aa([{id:g, defaultVal:a ? a.objColor : null}]);
    ra([{id:h, defaultVal:a ? a.objFontSize.replace("px", "") : null}]);
    ba([{id:l, defaultVal:a ? parseInt(a.motionTime) : null}]);
    ca([{id:k, defaultVal:a ? parseInt(a.delayTime) : null}]);
    da([{id:m, defaultVal:a ? a.startAlpha : null}]);
    ea([{id:n, defaultVal:a ? a.endAlpha : null}]);
    fa([{id:r, defaultVal:a ? a.waitOnSceneTime : null}]);
    ga([{id:p, defaultVal:a ? a.outOfSceneTime : null}]);
    sa([{id:t, defaultVal:a ? a.objFont : null}]);
    y("#" + e + " .outOfSceneMotion", a ? a.outOfSceneMotion : "noMotion");
    y("#" + e + " .add-animation-easing", a ? a.easingName : "easeOut");
    y("#" + e + " .fontStyle", a ? a.fontStyle : "regular");
    a && 1 == a.autoRotate && jQuery("#" + e + " label.autoRotate input").attr("checked", "checked");
    a && 1 == a.hideBeginning && jQuery("#" + e + " label.hideElemBeginning input").attr("checked", "checked");
    a && a.linkActive && (jQuery("#" + e + " label.link-checkbox input").attr("checked", "checked"), jQuery("#" + e + " .uneditable-input").remove(), jQuery("#" + e + " .link-checkbox").parent().append('<input autocomplete="off" class="input-xlarge link-holder" type="text"></input>'), jQuery("#" + e + " .link-holder").val(a.objLink));
    g = "Baumans";
    a && a.objFont && (g = a.objFont, g.indexOf(":") && (g = g.split(":"), g = g[0]));
    g = (new CAAT.Foundation.UI.TextActor).setFont(a ? a.fontStyle + " " + a.objFontSize + " " + g : "40px Baumans").setText(jQuery("#" + e + " .text-holder").val()).setLocation(a ? a.coordsArray[0].x : 1800, a ? a.coordsArray[0].y : 400).setAlpha(a ? a.startAlpha : 1).setTextFillStyle(a ? a.objColor : "#3e3e3e").enableEvents(!0).emptyBehaviorList();
    k = a ? E(a.coordsArray, g, a.elemID) : E(null, g, e);
    a && 1 == a.hideBeginning && g.setAlpha(0);
    g.addBehavior((new CAAT.Behavior.PathBehavior).setPath(k).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3).setCycle(!1).setAutoRotate(a && a.autoRotate ? !0 : !1, a && a.autoRotate ? CAAT.PathBehavior.autorotate.FREE : !1).setInterpolator(a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4))).addBehavior((new CAAT.Behavior.AlphaBehavior).setInterpolator(a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? 
    a.startAlpha : 1, a ? a.endAlpha : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3)).addBehavior((new CAAT.Behavior.ScaleBehavior).setInterpolator(a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? a.scaleStart : 1, a ? a.scaleEnd : 1, a ? a.scaleStart : 1, a ? a.scaleEnd : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3));
    h = a ? a : {};
    a || (h.coordsArray = [], h.delayTime = 650, h.motionTime = 650, h.outOfSceneTime = 650, h.waitOnSceneTime = 3, h.outOfSceneMotion = "noMotion", h.objType = "singleText", h.objText = "New Text", h.fontStyle = "", h.objSrc = "", h.linkActive = !1, h.objLink = "", h.objBorderColor = "", h.objColor = "#3e3e3e", h.objFontSize = "40px", h.objFont = "sans", h.elemID = e, h.autoRotate = !1, h.hideBeginning = !1, h.easingName = "", h.startAlpha = 1, h.endAlpha = 1, h.scaleStart = 1, h.scaleEnd = 1);
    h.pathRemoved = !1;
    h.path = k;
    k = h.path.numControlPoints();
    if (0 >= h.coordsArray.length) {
      for (l = 0;l < k;l++) {
        h.coordsArray.push(h.path.getControlPoint(l));
      }
    }
    h.Actor = g;
    h.easing = a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4);
    b[c].actorElems || (b[c].actorElems = []);
    b[c].actorElems.push(h);
    a && a.linkActive && I(g, a.objLink);
    b[c].theScene.addChildAt(g, b[c].theScene.childrenList.length);
    a && "noMotion" != a.outOfSceneMotion && J(h, h.outOfSceneMotion);
    f = x(e);
  }
  function X(d, a) {
    var e = (a = "undefined" === typeof a || null == a ? null : a) ? a.elemID : N(), g = M(), h = M(), k = q(), l = q(), m = q(), n = q(), r = q(), p = q(), t = q(), v = q(), w = q(), z = q(), A = qa(), B = '<div class="postbox no-margin" id="' + e + '"><div class="handlediv" title="Click to toggle"><br /></div><h3 class="handle"><input autocomplete="off" class="elem_checked_for_edit" elementBind="' + e + '" type="checkbox"> <span>' + (a ? a.objText : "New Text") + '</span></h3><div class="inside curvy-element-settings-container"><div><div class="row" style="margin:0px -10px; width:auto;"><div class="large-6 columns element_tabs_link_container"><a class="a_no_link text_typography_settings-button">Text and Typography</a> | <a class="a_no_link text_box_settings-button">Box Settings</a> | <a class="a_no_link animation_settings-button">Animation Details</a> | <a class="a_no_link coords_settings-button">Coordinates</a></div><div class="large-6 columns element_play_save_duplicate" style="text-align:right;"><a class="a_no_link remove-element removediv" elementBind="' + 
    e + '"><i class="fa fa-times"></i> Delete</a> | <a class="a_no_link duplicate-current-anim-element" elementBind="' + e + '"><i class="fa fa-copy"></i> Duplicate</a> | <a class="a_no_link save-current-anim-element" elementBind="' + e + '"><i class="icon-save"></i> Save Element</a> | <a class="a_no_link play-current-anim-element" elementBind="' + e + '"><i class="fa fa-play"></i> Play Element</a></div></div><div class="code-br"></div><div class="row text_typography_settings element_settings_tab"><h3>Text and Typography Settings</h3><div class="row"><div class="large-3 columns"><h4>Enter Your Text</h4><input autocomplete="off" class="input-xlarge pull-left text-holder" type="text" value="' + 
    (a ? a.objText : "New Text") + '" ></div><div class="large-3 columns"><h4>Choose Font</h4><input autocomplete="off" class="fontDataHolder" id="' + A + '" type="text" fontData="" /></div><div class="large-2 columns"><h4>Font Size : <span class="current-font-size ">' + (a ? a.objFontSize : "40px") + '</span></h4><div id="' + k + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Font Color</h4><input autocomplete="off" type="text" id="' + g + '" value="' + (a ? a.objColor : 
    "#f0f0f0") + '" class="font-color" data-default-color="' + (a ? a.objColor : "#f0f0f0") + '" /></div></div><div class="row"><div class="large-2 columns"><h4>Font Style</h4><select class="pull-left fontStyle span2"><option element="normal">Regular</option><option element="bold">Bold</option><option element="italic">Italic</option><option element="bold italic">Bold + Italic</option><option element="100">100</option><option element="200">200</option><option element="300">300</option><option element="400">400</option><option element="500">500</option><option element="600">600</option><option element="700">700</option><option element="800">800</option></select></div><div class="large-3 columns"><h4><label class="checkbox link-checkbox"><input autocomplete="off" type="checkbox" value=""> Activate Linking</label></h4><div class="code-br"></div><span class="input-xlarge uneditable-input" style="max-width:255px;"></span></div><div class="large-7 columns"></div></div></div><div class="row animation_settings element_settings_tab hide"><h3>Animation Details</h3><div class="row"><div class="large-2 columns"><h4>Motion Time : <span class="current-time ">' + 
    (a ? parseInt(a.motionTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + m + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Delay Time : <span class="current-delay ">' + (a ? parseInt(a.delayTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + l + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Easing</h4><select class="pull-left add-animation-easing"><option element="easeOut">easeOut</option><option element="easeIn">easeIn</option><option element="easeInOut">easeInOut</option><option element="bounce">Bounce</option><option element="linear">Linear</option></select></div><div class="large-2 columns"><h4>Alpha Start : <span class="current-start-alpha ">' + 
    (a ? a.startAlpha : 1) + '</span></h4><div id="' + n + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Alpha End : <span class="current-end-alpha ">' + (a ? a.endAlpha : 1) + '</span></h4><div id="' + r + '" class="ui-slider-no-conflict"></div></div><div class="large-1 columns"><h4>Hide</h4><label class="checkbox hideElemBeginning"><input autocomplete="off" type="checkbox" value="">Hide At Beginning</label></div><div class="large-1 columns"><h4>Rotate</h4><label class="checkbox autoRotate"><input autocomplete="off" type="checkbox" value="">Auto Rotate</label></div></div><div class="row"><div class="large-2 columns"><h4>Wait on scene : <span class="current-wait-time">' + 
    (a ? a.waitOnSceneTime / 1E3 : 3) + '</span></h4><div id="' + p + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Out of scene motion time : <span class="current-out-time">' + (a ? a.outOfSceneTime / 1E3 : .65) + '</span></h4><div id="' + t + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Out of Scene Motion</h4><select class="pull-left outOfSceneMotion span2"><option element="noMotion">No Motion</option><option element="toRight">To Right</option><option element="toLeft">To Left</option><option element="toTop">To Top</option><option element="toBottom">To Bottom</option><option element="alpha">Alpha</option></select></div><div class="large-1 columns"></div></div></div><div class="row coords_settings element_settings_tab hide"><h3>Coordinates</h3><div class="row"><div class="large-2 columns"><h4>Start X : </h4><input autocomplete="off" class="input-small pull-left text-holder x1" type="text" value="' + 
    (a ? parseInt(a.coordsArray[0].x) : 1150) + '"><br /><h4>Start Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y1" type="text" value="' + (a ? parseInt(a.coordsArray[0].y) : 219) + '"></div><div class="large-2 columns"><h4>Curve X : </h4><input autocomplete="off" class="input-small pull-left text-holder x2" type="text" value="' + (a ? parseInt(a.coordsArray[1].x) : 1130) + '"><br /><h4>Curve Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y2" type="text" value="' + 
    (a ? parseInt(a.coordsArray[1].y) : 350) + '"><br /></div><div class="large-2 columns"><h4>End X : </h4><input autocomplete="off" class="input-small pull-left text-holder x3" type="text" value="' + (a ? parseInt(a.coordsArray[2].x) : 780) + '"><br /><h4>End Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y3" type="text" value="' + (a ? parseInt(a.coordsArray[2].y) : 280) + '"><br /></div><div class="large-2 columns"><h4>Start Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-start" type="text" value="' + 
    (a ? a.scaleStart : 1) + '"><br /><h4>End Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-end" type="text" value="' + (a ? a.scaleEnd : 1) + '"><br /></div><div class="large-2 columns"><div style="height:50px;"></div><div class="button setCoordsBtn" elementBind="' + e + '"><i class="icon-level-up"></i> Update Coords</div></div><div class="large-2 columns"></div></div></div><div class="row text_box_settings element_settings_tab hide"><h3>Box Settings</h3><div class="row"><div class="large-3 columns"><h4>Horizontal Padding : <span class="padding-horizontal">' + 
    (a ? a.paddingH : 40) + '</span></h4><div id="' + v + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Vertical Padding : <span class="padding-vertical">' + (a ? a.paddingV : 40) + '</span></h4><div id="' + w + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Border Radius : <span class="bg-radius">' + (a ? a.bgRadius : 15) + '</span></h4><div id="' + z + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Color</h4><input autocomplete="off" type="text" id="' + 
    h + '" value="' + (a ? a.objBGColor : "#333333") + '" class="bg-color" data-default-color="' + (a ? a.objBGColor : "#333333") + '" /></div></div></div></div></div></div>';
    jQuery("#" + b[c].theSceneID + " .elementHolder").append(B);
    aa([{id:g, defaultVal:a ? a.objColor : null}]);
    aa([{id:h, defaultVal:a ? a.objBGColor : "#ffffff"}]);
    ra([{id:k, defaultVal:a ? a.objFontSize.replace("px", "") : null}]);
    ba([{id:m, defaultVal:a ? parseInt(a.motionTime) : null}]);
    ca([{id:l, defaultVal:a ? parseInt(a.delayTime) : null}]);
    da([{id:n, defaultVal:a ? a.startAlpha : null}]);
    ea([{id:r, defaultVal:a ? a.endAlpha : null}]);
    fa([{id:p, defaultVal:a ? a.waitOnSceneTime : null}]);
    ga([{id:t, defaultVal:a ? a.outOfSceneTime : null}]);
    Ka([{id:v, defaultVal:a ? a.paddingH : 40}]);
    La([{id:w, defaultVal:a ? a.paddingV : 40}]);
    Ma([{id:z, defaultVal:a ? a.bgRadius : 40}]);
    sa([{id:A, defaultVal:a ? a.objFont : null}]);
    y("#" + e + " .outOfSceneMotion", a ? a.outOfSceneMotion : "noMotion");
    y("#" + e + " .add-animation-easing", a ? a.easingName : "easeOut");
    y("#" + e + " .fontStyle", a ? a.fontStyle : "regular");
    a && 1 == a.autoRotate && jQuery("#" + e + " label.autoRotate input").attr("checked", "checked");
    a && 1 == a.hideBeginning && jQuery("#" + e + " label.hideElemBeginning input").attr("checked", "checked");
    a && a.linkActive && (jQuery("#" + e + " label.link-checkbox input").attr("checked", "checked"), jQuery("#" + e + " .uneditable-input").remove(), jQuery("#" + e + " .link-checkbox").parent().append('<input autocomplete="off" class="input-xlarge link-holder" type="text"></input>'), jQuery("#" + e + " .link-holder").val(a.objLink));
    g = "Baumans";
    a && a.objFont && (g = a.objFont, g.indexOf(":") && (g = g.split(":"), g = g[0]));
    g = (new CAAT.Foundation.UI.TextActor).setFont(a ? a.fontStyle + " " + a.objFontSize + " " + g : "40px Baumans").setText(jQuery("#" + e + " .text-holder").val()).setTextFillStyle(a ? a.objColor : "#f0f0f0");
    g.centerAt((g.textWidth + parseInt(a ? a.paddingH : 40)) / 2, (g.textHeight + parseInt(a ? a.paddingV : 30)) / 2);
    h = (new CAAT.Foundation.ActorContainer).setLocation(a ? a.coordsArray[0].x : 1800, a ? a.coordsArray[0].y : 400).setAlpha(a ? a.startAlpha : 1).enableEvents(!0).emptyBehaviorList();
    h.addChild(g);
    k = ta(g.textWidth + parseInt(a ? a.paddingH : 40), g.textHeight + parseInt(a ? a.paddingV : 30), parseInt(a ? a.bgRadius : 10), a ? a.objBGColor : "#333333");
    h.setBackgroundImage(k);
    l = a ? E(a.coordsArray, h, a.elemID) : E(null, h, e);
    a && 1 == a.hideBeginning && h.setAlpha(0);
    h.setGlobalAlpha(!0).addBehavior((new CAAT.Behavior.PathBehavior).setPath(l).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3).setCycle(!1).setAutoRotate(a && a.autoRotate ? !0 : !1, a && a.autoRotate ? CAAT.PathBehavior.autorotate.FREE : !1).setInterpolator(a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4))).addBehavior((new CAAT.Behavior.AlphaBehavior).setInterpolator(a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? 
    a.startAlpha : 1, a ? a.endAlpha : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3)).addBehavior((new CAAT.Behavior.ScaleBehavior).setInterpolator(a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? a.scaleStart : 1, a ? a.scaleEnd : 1, a ? a.scaleStart : 1, a ? a.scaleEnd : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3));
    k = a ? a : {};
    a || (k.coordsArray = [], k.delayTime = 650, k.motionTime = 650, k.outOfSceneTime = 650, k.waitOnSceneTime = 3, k.outOfSceneMotion = "noMotion", k.objType = "singleBoxedText", k.objText = "New Text", k.fontStyle = "", k.objSrc = "", k.linkActive = !1, k.objLink = "", k.objBorderColor = "", k.objColor = "#3e3e3e", k.objFontSize = "40px", k.objFont = "sans", k.elemID = e, k.autoRotate = !1, k.hideBeginning = !1, k.easingName = "", k.startAlpha = 1, k.endAlpha = 1, k.scaleStart = 1, k.scaleEnd = 
    1);
    k.pathRemoved = !1;
    k.path = l;
    l = k.path.numControlPoints();
    if (0 >= k.coordsArray.length) {
      for (m = 0;m < l;m++) {
        k.coordsArray.push(k.path.getControlPoint(m));
      }
    }
    k.Actor = h;
    k.textActor = g;
    k.easing = a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4);
    b[c].actorElems || (b[c].actorElems = []);
    b[c].actorElems.push(k);
    a && a.linkActive && I(h, a.objLink, a);
    b[c].theScene.addChildAt(h, b[c].theScene.childrenList.length);
    a && "noMotion" != a.outOfSceneMotion && J(k, k.outOfSceneMotion);
    f = x(e);
  }
  function ta(b, a, c, g) {
    var h = document.createElement("canvas");
    c = "undefined" == typeof c ? c = 20 : c;
    var f = h.getContext("2d");
    h.width = b;
    h.height = a;
    f.fillStyle = g;
    f.clearRect(0, 0, b, a);
    f.beginPath();
    f.moveTo(c, 0);
    f.lineTo(b - c, 0);
    f.quadraticCurveTo(b, 0, b, c);
    f.lineTo(b, a - c);
    f.quadraticCurveTo(b, a, b - c, a);
    f.lineTo(c, a);
    f.quadraticCurveTo(0, a, 0, a - c);
    f.lineTo(0, c);
    f.quadraticCurveTo(0, 0, c, 0);
    f.closePath();
    f.fill();
    return h;
  }
  function Y(d, a, e) {
    d = (a = "undefined" === typeof a || null == a ? null : a) ? a.elemID : N();
    q();
    var g = q(), h = q(), k = q(), m = q(), n = q(), r = q(), p = a ? a.objSrc.substr(a.objSrc.lastIndexOf("/") + 1) : "New Image";
    a && a.objSrc && ua({id:d, url:a.objSrc}, c);
    p = '<div class="postbox no-margin" id="' + d + '"><div class="handlediv" title="Click to toggle"><br /></div><h3 class="handle"><input autocomplete="off" class="elem_checked_for_edit" elementBind="' + d + '" type="checkbox"> <span>' + p + '</span></h3><div class="inside curvy-element-settings-container"><div><div class="row" style="margin:0px -10px; width:auto;"><div class="large-6 columns element_tabs_link_container"><a class="a_no_link image_settings-button">Image Settings</a> | <a class="a_no_link animation_settings-button">Animation Details</a> | <a class="a_no_link coords_settings-button">Coordinates</a></div><div class="large-6 columns element_play_save_duplicate" style="text-align:right;"><a class="a_no_link remove-element removediv" elementBind="' + 
    d + '"><i class="fa fa-times"></i> Delete</a> | <a class="a_no_link duplicate-current-anim-element" elementBind="' + d + '"><i class="fa fa-copy"></i> Duplicate</a> | <a class="a_no_link save-current-anim-element" elementBind="' + d + '"><i class="icon-save"></i> Save Element</a> | <a class="a_no_link play-current-anim-element" elementBind="' + d + '"><i class="fa fa-play"></i> Play Element</a></div></div><div class="code-br"></div><div class="row image_settings element_settings_tab"><h3>Image Settings</h3><div class="row"><div class="image_nocode_container large-9 columns"><h5>Background Image</h5><label for="upload_image"> <input autocomplete="off" id="background-image-id-' + 
    d + '" class="upload_image_button" style="width:auto;" size="76" name="upload_image" type="text" value="' + (a ? a.objSrc : "") + '" /> <div class="button image_uploader_class">Upload Image</div><div class="button add_image_url_to_scene" elementBind="' + d + '">Add To Scene</div> </label></div><div class="large-3 columns"><h4><label class="checkbox link-checkbox"><input autocomplete="off" type="checkbox" value=""> Activate Linking</label></h4><div class="code-br"></div><span class="input-xlarge uneditable-input" style="max-width:255px;"></span></div></div></div><div class="hide dataHolder"></div><div class="row animation_settings element_settings_tab hide"><h3>Animation Details</h3><div class="row"><div class="large-2 columns"><h4>Motion Time : <span class="current-time ">' + 
    (a ? parseInt(a.motionTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + h + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Delay Time : <span class="current-delay ">' + (a ? parseInt(a.delayTime) / 1E3 : .65) + ' sec.</span></h4><div id="' + g + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Easing</h4><select class="pull-left add-animation-easing"><option element="easeOut">easeOut</option><option element="easeIn">easeIn</option><option element="easeInOut">easeInOut</option><option element="bounce">Bounce</option><option element="linear">Linear</option></select></div><div class="large-2 columns"><h4>Alpha Start : <span class="current-start-alpha ">' + 
    (a ? a.startAlpha : 1) + '</span></h4><div id="' + k + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Alpha End : <span class="current-end-alpha ">' + (a ? a.endAlpha : 1) + '</span></h4><div id="' + m + '" class="ui-slider-no-conflict"></div></div><div class="large-1 columns"><h4>Hide</h4><label class="checkbox hideElemBeginning"><input autocomplete="off" type="checkbox" value="">Hide At Beginning</label></div><div class="large-1 columns"><h4>Rotate</h4><label class="checkbox autoRotate"><input autocomplete="off" type="checkbox" value="">Auto Rotate</label></div></div><div class="row"><div class="large-2 columns"><h4>Wait on scene : <span class="current-wait-time">' + 
    (a ? a.waitOnSceneTime / 1E3 : 3) + '</span></h4><div id="' + n + '" class="ui-slider-no-conflict"></div></div><div class="large-3 columns"><h4>Out of scene motion time : <span class="current-out-time">' + (a ? a.outOfSceneTime / 1E3 : .65) + '</span></h4><div id="' + r + '" class="ui-slider-no-conflict"></div></div><div class="large-2 columns"><h4>Out of Scene Motion</h4><select class="pull-left outOfSceneMotion span2"><option element="noMotion">No Motion</option><option element="toRight">To Right</option><option element="toLeft">To Left</option><option element="toTop">To Top</option><option element="toBottom">To Bottom</option><option element="alpha">Alpha</option></select></div><div class="large-1 columns"></div></div></div><div class="row coords_settings element_settings_tab hide"><h3>Coordinates</h3><div class="row"><div class="large-2 columns"><h4>Start X : </h4><input autocomplete="off" class="input-small pull-left text-holder x1" type="text" value="' + 
    (a ? parseInt(a.coordsArray[0].x) : 1150) + '"><br /><h4>Start Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y1" type="text" value="' + (a ? parseInt(a.coordsArray[0].y) : 219) + '"></div><div class="large-2 columns"><h4>Curve X : </h4><input autocomplete="off" class="input-small pull-left text-holder x2" type="text" value="' + (a ? parseInt(a.coordsArray[1].x) : 1130) + '"><br /><h4>Curve Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y2" type="text" value="' + 
    (a ? parseInt(a.coordsArray[1].y) : 350) + '"><br /></div><div class="large-2 columns"><h4>End X : </h4><input autocomplete="off" class="input-small pull-left text-holder x3" type="text" value="' + (a ? parseInt(a.coordsArray[2].x) : 780) + '"><br /><h4>End Y : </h4><input autocomplete="off" class="input-small pull-left text-holder y3" type="text" value="' + (a ? parseInt(a.coordsArray[2].y) : 280) + '"><br /></div><div class="large-2 columns"><h4>Start Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-start" type="text" value="' + 
    (a ? a.scaleStart : 1) + '"><br /><h4>End Scale : </h4><input autocomplete="off" class="input-small pull-left text-holder scale-end" type="text" value="' + (a ? a.scaleEnd : 1) + '"><br /></div><div class="large-2 columns"><div style="height:50px;"></div><div class="button setCoordsBtn" elementBind="' + d + '"><i class="icon-level-up"></i> Update Coords</div></div><div class="large-2 columns"></div></div></div></div></div></div>';
    jQuery("#" + b[c].theSceneID + " .elementHolder").append(p);
    ba([{id:h, defaultVal:a ? parseInt(a.motionTime) : null}]);
    ca([{id:g, defaultVal:a ? parseInt(a.delayTime) : null}]);
    da([{id:k, defaultVal:a ? a.startAlpha : null}]);
    ea([{id:m, defaultVal:a ? a.endAlpha : null}]);
    fa([{id:n, defaultVal:a ? a.waitOnSceneTime : null}]);
    ga([{id:r, defaultVal:a ? a.outOfSceneTime : null}]);
    y("#" + d + " .outOfSceneMotion", a ? a.outOfSceneMotion : "noMotion");
    y("#" + d + " .add-animation-easing", a ? a.easingName : "easeOut");
    a && 1 == a.autoRotate && jQuery("#" + d + " label.autoRotate input").attr("checked", "checked");
    a && 1 == a.hideBeginning && jQuery("#" + d + " label.hideElemBeginning input").attr("checked", "checked");
    a && a.linkActive && (jQuery("#" + d + " label.link-checkbox input").attr("checked", "checked"), jQuery("#" + d + " .uneditable-input").remove(), jQuery("#" + d + " .link-checkbox").parent().append('<input autocomplete="off" class="input-xlarge link-holder" type="text"></input>'), jQuery("#" + d + " .link-holder").val(a.objLink));
    g = (new CAAT.Foundation.Actor).setLocation(a ? a.coordsArray[0].x : 1800, a ? a.coordsArray[0].y : 400).enableEvents(!0).setPositionAnchor(.5, .5).emptyBehaviorList();
    a && (e ? H(g, a.elemID, a.objSrc) : g.setBackgroundImage(l.getImage(a.elemID)));
    h = a ? E(a.coordsArray, g, a.elemID) : E(null, g, d);
    a && 1 == a.hideBeginning && g.setAlpha(0);
    g.addBehavior((new CAAT.Behavior.PathBehavior).setValues(h).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3).setCycle(!1).setAutoRotate(a && a.autoRotate ? !0 : !1, a && a.autoRotate ? CAAT.PathBehavior.autorotate.FREE : !1).setInterpolator(a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4))).addBehavior((new CAAT.Behavior.AlphaBehavior).setInterpolator(a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? 
    a.startAlpha : 1, a ? a.endAlpha : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3)).addBehavior((new CAAT.Behavior.ScaleBehavior).setInterpolator(a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4)).setValues(a ? a.scaleStart : 1, a ? a.scaleEnd : 1, a ? a.scaleStart : 1, a ? a.scaleEnd : 1).setDelayTime(a ? parseInt(a.delayTime) : 1800, a ? parseInt(a.motionTime) : 1E3));
    e = a ? a : {};
    a || (e.coordsArray = [], e.delayTime = 650, e.motionTime = 650, e.outOfSceneTime = 650, e.waitOnSceneTime = 3, e.outOfSceneMotion = "noMotion", e.objType = "image", e.objText = "New Text", e.fontStyle = "", e.objSrc = "", e.linkActive = !1, e.objLink = "", e.objBorderColor = "", e.objColor = "#3e3e3e", e.objFontSize = "40px", e.objFont = "sans", e.elemID = d, e.autoRotate = !1, e.hideBeginning = !1, e.easingName = "", e.startAlpha = 1, e.endAlpha = 1, e.scaleStart = 1, e.scaleEnd = 1);
    e.pathRemoved = !1;
    e.path = h;
    h = e.path.numControlPoints();
    if (0 >= e.coordsArray.length) {
      for (k = 0;k < h;k++) {
        e.coordsArray.push(e.path.getControlPoint(k));
      }
    }
    e.Actor = g;
    e.easing = a ? u(a.easingName) : (new CAAT.Interpolator).createExponentialOutInterpolator(4);
    b[c].actorElems || (b[c].actorElems = []);
    b[c].actorElems.push(e);
    a && a.linkActive && I(g, a.objLink);
    b[c].theScene.addChildAt(g, b[c].theScene.childrenList.length);
    a && "noMotion" != a.outOfSceneMotion && J(e, e.outOfSceneMotion);
    f = x(d);
  }
  function ua(d, a) {
    "undefined" == typeof a && (a = c);
    for (var e = !1, g = 0;g < b[a].imageArray.length;g++) {
      b[a].imageArray[g] == d && (e = !0);
    }
    e || b[a].imageArray.push(d);
  }
  function H(d, a, e, g) {
    var h = {};
    h.url = e;
    h.id = a;
    "undefined" != typeof b[c] && ua(h, c);
    (new CAAT.Module.Preloader.Preloader).addElement(a, e).load(function(a) {
      d.setBackgroundImage(a[a.length - 1].image);
      "undefined" != typeof callback && g();
    });
  }
  function I(b, a, c) {
    "undefined" == typeof c ? (b.mouseClick = function(b) {
      window.location.href = a;
    }, b.mouseEnter = function(a) {
      document.getElementById("experiment-canvas").style.cursor = "pointer";
    }, b.mouseExit = function(a) {
      document.getElementById("experiment-canvas").style.cursor = "default";
    }) : "singleBoxedText" != c.objType || c.buttonCover || (c.buttonCover = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).setBounds(0, 0, b.width, b.height).setFillStyle("blue").setAlpha(0), c.buttonCover.mouseClick = function(b) {
      window.location.href = a;
    }, c.buttonCover.mouseEnter = function(a) {
      document.getElementById("experiment-canvas").style.cursor = "pointer";
    }, c.buttonCover.mouseExit = function(a) {
      document.getElementById("experiment-canvas").style.cursor = "default";
    }, b.addChild(c.buttonCover));
  }
  function va(b, a) {
    a && a.buttonCover ? (a.Actor.removeChild(a.buttonCover), a.buttonCover.mouseClick = function(a) {
    }, a.buttonCover.mouseEnter = function(a) {
    }, a.buttonCover.mouseExit = function(a) {
    }, a.buttonCover = null) : (b.mouseClick = function(a) {
    }, b.mouseEnter = function(a) {
    }, b.mouseExit = function(a) {
    });
  }
  function wa() {
    for (var d = 0;d < b[c].actorElems.length;d++) {
      b[c].actorElems[d].Actor.setGlobalAlpha(!0).setLocation(b[c].actorElems[d].coordsArray[0].x, b[c].actorElems[d].coordsArray[0].y).setAlpha(1 == b[c].actorElems[d].hideBeginning ? 0 : b[c].actorElems[d].startAlpha);
    }
  }
  function O() {
    var d = c;
    K();
    L = setTimeout(function() {
      d++;
      d >= b.length && (d = 0);
      D(d);
      c = d;
      G || O();
    }, 1E3 * b[c].sceneDetails.sceneDelay);
  }
  function K() {
    wa();
    for (var d = 0;d < b[c].actorElems.length;d++) {
      b[c].actorElems[d].Actor.emptyBehaviorList().setRotation(0).setGlobalAlpha(!0).setScale(b[c].actorElems[d].scaleStart, b[c].actorElems[d].scaleStart).addBehavior((new CAAT.Behavior.PathBehavior).setValues(b[c].actorElems[d].path).setDelayTime(b[c].actorElems[d].delayTime, b[c].actorElems[d].motionTime).setCycle(!1).setAutoRotate(b[c].actorElems[d].autoRotate ? !0 : !1, b[c].actorElems[d].autoRotate ? CAAT.PathBehavior.autorotate.FREE : !1).setInterpolator(b[c].actorElems[d].easing)).addBehavior((new CAAT.Behavior.AlphaBehavior).setValues(b[c].actorElems[d].startAlpha, 
      b[c].actorElems[d].endAlpha).setDelayTime(b[c].actorElems[d].delayTime, b[c].actorElems[d].motionTime).setInterpolator(b[c].actorElems[d].easing)).addBehavior((new CAAT.Behavior.ScaleBehavior).setValues(b[c].actorElems[d].scaleStart, b[c].actorElems[d].scaleEnd, b[c].actorElems[d].scaleStart, b[c].actorElems[d].scaleEnd).setDelayTime(b[c].actorElems[d].delayTime, b[c].actorElems[d].motionTime).setInterpolator(b[c].actorElems[d].easing)), "noMotion" != b[c].actorElems[d].outOfSceneMotion && 
      J(b[c].actorElems[d], b[c].actorElems[d].outOfSceneMotion);
    }
  }
  function ra(b) {
    for (var a = 0;a < b.length;a++) {
      jQuery("#" + b[a].id).slider({max:100, min:6, step:1, value:b[a].defaultVal ? b[a].defaultVal : 40, slide:function(a, b) {
        jQuery(this).parent().find(".current-font-size").html(b.value + "px");
      }});
    }
  }
  function ba(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? c / 1E3 : .65;
      jQuery("#" + b[a].id).slider({max:20, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-time").html(b.value + " sec.");
      }});
    }
  }
  function ca(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? c / 1E3 : .65;
      jQuery("#" + b[a].id).slider({max:30, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-delay").html(b.value + " sec.");
      }});
    }
  }
  function Da(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal;
      c || 0 == c || (c = .65);
      jQuery("#" + b[a].id).slider({max:20, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-scene-time").html(b.value + " sec.");
      }});
    }
  }
  function Ea(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal;
      c || 0 == c || (c = 6);
      jQuery("#" + b[a].id).slider({max:40, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-scene-delay").html(b.value + " sec.");
      }});
    }
  }
  function da(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal;
      c || 0 == c || (c = 1);
      jQuery("#" + b[a].id).slider({max:1, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-start-alpha").html(b.value);
      }});
    }
  }
  function ea(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal;
      c || 0 == c || (c = 1);
      jQuery("#" + b[a].id).slider({max:1, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-end-alpha").html(b.value);
      }});
    }
  }
  function fa(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? c / 1E3 : 1;
      jQuery("#" + b[a].id).slider({max:10, min:0, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-wait-time").html(b.value);
      }});
    }
  }
  function ga(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? c / 1E3 : 1;
      jQuery("#" + b[a].id).slider({max:10, min:.05, step:.05, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".current-out-time").html(b.value);
      }});
    }
  }
  function Ka(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? parseInt(c) : 1;
      jQuery("#" + b[a].id).slider({max:100, min:1, step:1, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".padding-horizontal").html(b.value);
      }});
    }
  }
  function La(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? parseInt(c) : 1;
      jQuery("#" + b[a].id).slider({max:100, min:1, step:1, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".padding-vertical").html(b.value);
      }});
    }
  }
  function Ma(b) {
    for (var a = 0;a < b.length;a++) {
      var c = b[a].defaultVal, c = c || 0 == c ? parseInt(c) : 1;
      jQuery("#" + b[a].id).slider({max:100, min:0, step:1, value:c, slide:function(a, b) {
        jQuery(this).parent().find(".bg-radius").html(b.value);
      }});
    }
  }
  function sa(b) {
    for (var a = 0;a < b.length;a++) {
      jQuery("#" + b[a].id).fontselect().change(function() {
        var a = jQuery(this).val().replace(/\+/g, " ");
        jQuery(this).attr("fontData", a);
      }).attr("fontData", b[a].defaultVal).parent().find("div.font-select > a > span").css("font-family", b[0].defaultVal).html(b[a].defaultVal);
    }
  }
  function aa(b) {
    for (var a = 0;a < b.length;a++) {
      jQuery("#" + b[a].id).wpColorPicker();
    }
  }
  function q() {
    var b;
    if (0 < jQuery("#amount-slider-" + z).length) {
      for (;0 < jQuery("#amount-slider-" + z).length;) {
        z++, 0 >= jQuery("#amount-slider-" + z).length && (b = z);
      }
    } else {
      z++, b = z - 1;
    }
    return "amount-slider-" + b;
  }
  function qa() {
    var b;
    if (0 < jQuery("#google-font-" + A).length) {
      for (;0 < jQuery("#google-font-" + A).length;) {
        A++, 0 >= jQuery("#google-font-" + A).length && (b = A);
      }
    } else {
      A++, b = A - 1;
    }
    return "google-font-" + b;
  }
  function M() {
    var b;
    if (0 < jQuery("#colorpicker-" + B).length) {
      for (;0 < jQuery("#colorpicker-" + B).length;) {
        B++, 0 >= jQuery("#colorpicker-" + B).length && (b = B);
      }
    } else {
      B++, b = B - 1;
    }
    Na.push("colorpicker-" + b);
    return "colorpicker-" + b;
  }
  function u(b) {
    switch(b) {
      case "easeIn":
        return (new CAAT.Behavior.Interpolator).createExponentialInInterpolator(6, !1);
      case "easeOut":
        return (new CAAT.Behavior.Interpolator).createExponentialOutInterpolator(6, !1);
      case "easeInOut":
        return (new CAAT.Behavior.Interpolator).createExponentialInOutInterpolator(6, !1);
      case "bounce":
        return (new CAAT.Behavior.Interpolator).createBounceOutInterpolator(!1);
      case "elastic":
        return (new CAAT.Behavior.Interpolator).createElasticOutInterpolator(1, .2, !1);
      case "linear":
        return (new CAAT.Behavior.Interpolator).createLinearInterpolator(!1, !1);
      default:
        return (new CAAT.Behavior.Interpolator).createLinearInterpolator(!1, !1);
    }
  }
  function N() {
    if (0 < jQuery("#elem-" + C).length) {
      for (;0 < jQuery("#elem-" + C).length;) {
        if (C++, 0 >= jQuery("#elem-" + C).length) {
          return "elem-" + C;
        }
      }
    } else {
      return C++, "elem-" + (C - 1);
    }
  }
  function x(d) {
    for (var a = 0;a < b[c].actorElems.length;a++) {
      if (b[c].actorElems[a].elemID == d) {
        return a;
      }
    }
  }
  function J(b, a) {
    var c = 0, c = 0, c = b.Actor.width, f = b.Actor.height, h = b.path.numControlPoints();
    b.coordsArray = [];
    for (var k = 0;k < h;k++) {
      b.coordsArray.push(b.path.getControlPoint(k));
    }
    if ("noMotion" != a) {
      if ("toRight" == a) {
        c = "image" == b.objType ? r + t + c / 2 + 40 : r + t + 40, c = (new CAAT.LinearPath).setInitialPosition(parseInt(b.coordsArray[2].x), parseInt(b.coordsArray[2].y)).setFinalPosition(parseInt(c), parseInt(b.coordsArray[2].y));
      } else {
        if ("toLeft" == a) {
          c = "image" == b.objType ? t - 40 - c / 2 : t - 40 - c, c = (new CAAT.LinearPath).setInitialPosition(parseInt(b.coordsArray[2].x), parseInt(b.coordsArray[2].y)).setFinalPosition(parseInt(c), parseInt(b.coordsArray[2].y));
        } else {
          if ("toTop" == a) {
            c = "image" == b.objType ? p - 40 - f / 2 : p - 40 - f, c = (new CAAT.LinearPath).setInitialPosition(parseInt(b.coordsArray[2].x), parseInt(b.coordsArray[2].y)).setFinalPosition(parseInt(b.coordsArray[2].x), parseInt(c));
          } else {
            if ("toBottom" == a) {
              c = "image" == b.objType ? p + v + 40 + f / 2 : p + v + 40, c = (new CAAT.LinearPath).setInitialPosition(parseInt(b.coordsArray[2].x), parseInt(b.coordsArray[2].y)).setFinalPosition(parseInt(b.coordsArray[2].x), parseInt(c));
            } else {
              "alpha" == a && b.Actor.setGlobalAlpha(!0).addBehavior((new CAAT.Behavior.AlphaBehavior).setValues(b.endAlpha, 0).setDelayTime(b.motionTime + b.delayTime + b.waitOnSceneTime, b.outOfSceneTime));
              return;
            }
          }
        }
      }
      b.Actor.setGlobalAlpha(!0).addBehavior((new CAAT.Behavior.PathBehavior).setValues(c).setDelayTime(b.motionTime + b.delayTime + b.waitOnSceneTime, b.outOfSceneTime).setCycle(!1).setAutoRotate(!1).setInterpolator(b.easing));
    }
  }
  var Oa = setInterval(function() {
    "complete" === document.readyState && (clearInterval(Oa), za());
  }, 10), T = [], ia = 0, U = !1, r = 1920, v = 700, t = 240, p = 150, r = 1920, v = 700, ha, m, S, R = "Slider-Anim-0";
  jQuery(document).on("click", "#save-all-scenes", function() {
    jQuery("#save-all-scenes span.save-status").html(' <i class="fa fa-refresh fa-spin"></i>');
    Ca();
    var b = Aa();
    null != b && jQuery.post(ajaxurl, {curvyAnimationData:JSON.stringify(b), animationGoogleFonts:JSON.stringify(n), action:"curvy_save_animation"}, function(a) {
      null != a && (jQuery("#save-all-scenes span.save-status").html(' <i class="fa fa-check-square-o"></i>'), setTimeout(function() {
        jQuery("#save-all-scenes span.save-status").html("");
      }, 2E3));
    });

  });
  var l, ma, oa, n = [];
  jQuery(document).on("click", ".save-current-scene-details", function() {
    var d = "#" + jQuery(this).attr("sceneBind");
    b[c].sceneDetails.sceneTime = Number(jQuery(d + " .current-scene-time").html().replace(" sec.", ""));
    b[c].sceneDetails.sceneDelay = Number(jQuery(d + " .current-scene-delay").html().replace(" sec.", ""));
    b[c].sceneDetails.incomingMotion = parseInt(jQuery(d + " .scene-incoming-motion").find(":selected").attr("element"));
    b[c].sceneDetails.incomingAnchor = parseInt(jQuery(d + " .scene-incoming-anchor").find(":selected").attr("element"));
    b[c].sceneDetails.incomingEasing = jQuery(d + " .scene-incoming-easing").find(":selected").attr("element");
    b[c].sceneDetails.fallbackURL = jQuery("#" + jQuery(this).attr("fallbackBind")).val();
    d = jQuery("#colorpicker-" + jQuery(this).attr("elementBind")).val();
    "" != jQuery("#" + jQuery(this).attr("urlBind")).val() && void 0 != jQuery("#" + jQuery(this).attr("urlBind")).val() ? ("image" != !b[c].bg.bgType && (b[c].theScene.removeChildAt(0), b[c].bg.bgActor = null, b[c].bg.bgActor = (new CAAT.Foundation.ActorContainer).setBounds(0, 0, l.width, l.height).setSize(r, v).centerAt((r + 2 * t) / 2, (v + 2 * p) / 2), b[c].theScene.addChildAt(b[c].bg.bgActor, 0)), b[c].bg.bgURL = jQuery("#" + jQuery(this).attr("urlBind")).val(), H(b[c].bg.bgActor, jQuery(this).attr("urlBind"), 
    b[c].bg.bgURL), b[c].bg.bgType = "image") : "rgba(0, 0, 0, 0)" != jQuery("#" + b[c].theSceneID + " .scene-bg-color-holder .wp-color-result").css("background-color") && ("color" != !b[c].bg.bgType && (b[c].theScene.removeChildAt(0), b[c].bg.bgActor = null, b[c].bg.bgActor = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, p).setSize(r, v), b[c].theScene.addChildAt(b[c].bg.bgActor, 0)), b[c].bg.bgColor = d, b[c].bg.bgActor.setFillStyle(b[c].bg.bgColor), 
    b[c].bg.bgType = "color");
  });
  jQuery(document).on("click", ".reset-current-scene-bg", function() {
    b[c].bg.bgColor = "rgba(0,0,0,0)";
    b[c].bg.bgActor.setFillStyle("rgba(0,0,0,0)");
    "image" == b[c].bg.bgType && (b[c].theScene.removeChildAt(0), b[c].bg.bgActor = null, b[c].bg.bgActor = (new CAAT.Foundation.UI.ShapeActor).setShape(CAAT.Foundation.UI.ShapeActor.SHAPE_RECTANGLE).centerAt(t, p).setSize(r, v), b[c].theScene.addChildAt(b[c].bg.bgActor, 0), b[c].bg.bgURL = "");
    b[c].bg.bgType = "nobg";
    jQuery("#" + b[c].theSceneID + " .scene-bg-color-holder .wp-color-result").css("background-color", "rgba(0,0,0,0)");
  });
  var b = [], c = 0, w = "scene-0";
  jQuery(window).resize(function() {
    var b = parseInt(jQuery("#experiment-canvas").css("height").toString().replace("px", "")) + 15;
    jQuery("#experiment-holder").css("height", b + 30);
  });
  jQuery(document).on("click", ".add-new-scene-btn", function() {
    jQuery("#" + b[c].theSceneID).addClass("hidden");
    na();
  });
  jQuery(document).on("click", "li.scene-nav-elem span:not(.remove-scene-container)", function() {
    var b = jQuery(this).parents("li.scene-nav-elem").attr("ref").split("-");
    D(b[1]);
    K();
  });
  jQuery(document).on("click", ".remove-current-scene", function() {
    if (!(1 >= b.length)) {
      var c = jQuery(this).attr("scenebind");
      confirm("Are you sure you want to delete this scene?") && "undefined" != typeof c && Ja(c.toString().replace("scene-", ""));
    }
  });
  var Z;
  jQuery(document).on("click", ".remove-element", function() {
    var d = jQuery(this).attr("elementBind");
    f = x(d);
    if (confirm("Are you sure you want to delete this element?")) {
      la(b[c].actorElems[f]);
      var a = b[c].actorElems[f].elemID, e, g;
      for (e = 0;e < n.length;e++) {
        for (g = 0;g < n[e].elemID.length;g++) {
          if (n[e].elemID[g] == a) {
            n[e].elemID.splice(g, 1);
            1 > n[e].elemID.length && n.splice(e, 1);
            break;
          }
        }
      }
      b[c].theScene.removeChild(b[c].actorElems[f].Actor);
      b[c].actorElems.splice(f, 1);
      jQuery("#" + d).remove();
    }
  });
  jQuery(document).on("click", ".add-animation-element li", function() {
    jQuery(this).parent().find(".selected").removeClass("selected");
    jQuery(this).addClass("selected");
  });
  jQuery(document).on("click", " .add-element-btn", function() {
    if (jQuery("#add-animation-element-id").find(".selected").length) {
      switch(jQuery("#add-animation-element-id").find(".selected").attr("element")) {
        case "singleText":
          F(w, null);
          break;
        case "singleBoxedText":
          X(w, null);
          break;
        case "image":
          Y(w, null);
          break;
        case "button":
          break;
        default:
          F(w);
      }
      b[c].theScene.removeChild(b[c].pa);
      b[c].theScene.addChild(b[c].pa);
    }
  });
  var xa, P;
  jQuery(document).on("click", ".image_uploader_class", function() {
    xa = jQuery(this).parent().find(".upload_image_button").attr("id");
    P = wp.media.frames.file_frame = wp.media({title:"Choose Image", button:{text:"Choose Image"}, multiple:!1});
    P.on("select", function() {
      var b = P.state().get("selection").first().toJSON();
      jQuery("#" + xa).val(b.url);
    });
    P.open();
  });
  jQuery(document).on("click", ".duplicate-current-anim-element", function() {
    jQuery(this).attr("elementBind");
    f = x(jQuery(this).attr("elementBind"));
    var d = new pa(b[c].actorElems[f]);
    d.elemID = N();
    switch(d.objType) {
      case "singleText":
        F(b[c].theSceneID, d);
        break;
      case "singleBoxedText":
        X(b[c].theSceneID, d);
        break;
      case "image":
        Y(b[c].theSceneID, d, !0);
        break;
      case "button":
        break;
      default:
        F(w);
    }
    b[c].theScene.removeChild(b[c].pa);
    b[c].theScene.addChild(b[c].pa);
  });
  jQuery(document).on("click", ".text_typography_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".text_typography_settings").show();
  });
  jQuery(document).on("click", ".animation_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".animation_settings").show();
  });
  jQuery(document).on("click", ".coords_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".coords_settings").show();
  });
  jQuery(document).on("click", ".text_box_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".text_box_settings").show();
  });
  jQuery(document).on("click", ".image_settings-button", function() {
    jQuery(this).parent().parent().parent().parent().find(".element_settings_tab").hide();
    jQuery(this).parent().parent().parent().parent().find(".image_settings").show();
  });
  jQuery(document).on("click", ".add_image_url_to_scene", function() {
    var d = jQuery(this).attr("elementBind");
    f = x(d);
    H(b[c].actorElems[f].Actor, b[c].actorElems[f].elemID, jQuery("#" + d + " .upload_image_button").val());
    b[c].actorElems[f].objSrc = jQuery("#" + d + " .upload_image_button").val();
    var a = b[c].actorElems[f].objSrc.substr(b[c].actorElems[f].objSrc.lastIndexOf("/") + 1);
    jQuery("#" + d).find("h3.handle span").html(a);
  });
  jQuery(".getCoordsBtn").live("click", function() {
    var d = "#" + jQuery(this).attr("elementBind");
    f = x(jQuery(this).attr("elementBind"));
    for (var a = b[c].actorElems[f].path.numControlPoints(), e = [], g = 0;g < a;g++) {
      e.push(b[c].actorElems[f].path.getControlPoint(g));
    }
    jQuery(d + " .x1").val(parseInt(e[0].x));
    jQuery(d + " .y1").val(parseInt(e[0].y));
    jQuery(d + " .x2").val(parseInt(e[1].x));
    jQuery(d + " .y2").val(parseInt(e[1].y));
    jQuery(d + " .x3").val(parseInt(e[2].x));
    jQuery(d + " .y3").val(parseInt(e[2].y));
  });
  jQuery(document).on("click", ".setCoordsBtn", function() {
    var d = "#" + jQuery(this).attr("elementBind");
    f = x(jQuery(this).attr("elementBind"));
    var a = [];
    a.push(parseInt(jQuery(d + " .x1").val()));
    a.push(parseInt(jQuery(d + " .y1").val()));
    a.push(parseInt(jQuery(d + " .x2").val()));
    a.push(parseInt(jQuery(d + " .y2").val()));
    a.push(parseInt(jQuery(d + " .x3").val()));
    a.push(parseInt(jQuery(d + " .y3").val()));
    Fa(b[c].actorElems[f], a, jQuery(this).attr("elementBind"));
    d = b[c].actorElems[f].path.numControlPoints();
    for (a = 0;a < d;a++) {
      b[c].actorElems[f].coordsArray.push(b[c].actorElems[f].path.getControlPoint(a));
    }
  });
  jQuery(".link-checkbox").live("click", function() {
    jQuery(this).find("input[type=checkbox]").is(":checked") ? (jQuery(this).parent().find(".uneditable-input").remove(), jQuery(this).parent().append('<input autocomplete="off" class="input-xlarge link-holder" type="text"></input>')) : (jQuery(this).parent().find(".link-holder").remove(), jQuery(this).parent().append('<span class="input-xlarge uneditable-input" style="max-width:255px;"></span>'));
  });
  jQuery(document).on("click", ".save-current-anim-element", function() {
    var d = "#" + jQuery(this).attr("elementBind");
    f = x(jQuery(this).attr("elementBind"));
    "singleBoxedText" == b[c].actorElems[f].objType && (b[c].actorElems[f].paddingH = parseInt(jQuery(d + " .padding-horizontal").html()), b[c].actorElems[f].paddingV = parseInt(jQuery(d + " .padding-vertical").html()), b[c].actorElems[f].bgRadius = parseInt(jQuery(d + " .bg-radius").html()));
    if ("singleText" == b[c].actorElems[f].objType || "singleBoxedText" == b[c].actorElems[f].objType) {
      var a = jQuery(this).parent().parent().parent().find(".current-font-size").html(), e = "" != jQuery(d + " .fontDataHolder").attr("fontData") ? jQuery(d + " .fontDataHolder").attr("fontData") : "sans";
      b[c].actorElems[f].objFont = e;
      b[c].actorElems[f].objFontSize = a;
      b[c].actorElems[f].fontStyle = jQuery(d + " .fontStyle").find(":selected").attr("element");
      if ("singleText" == b[c].actorElems[f].objType) {
        var g = e;
        g.indexOf(":") && (g = g.split(":"), g = g[0]);
        b[c].actorElems[f].Actor.setFont(b[c].actorElems[f].fontStyle + " " + a + " " + g);
      } else {
        g = e, g.indexOf(":") && (g = g.split(":"), g = g[0]), b[c].actorElems[f].textActor.setFont(b[c].actorElems[f].fontStyle + " " + a + " " + g);
      }
      if ("sans" != e) {
        for (var a = b[c].actorElems[f].elemID, g = !1, h = 0, k = 0, h = 0;h < n.length;h++) {
          for (k = 0;k < n[h].elemID.length;k++) {
            if (n[h].elemID[k] == a) {
              n[h].elemID.splice(k, 1);
              1 > n[h].elemID.length && n.splice(h, 1);
              break;
            }
          }
        }
        for (h = 0;h < n.length;h++) {
          n[h].font == e && (g = !0, n[h].font == e && (n[h].elemID.push(a), g = !0));
        }
        g || n.push({font:e, elemID:[a]});
        for (h = 0;h < n.length;h++) {
          for (k = 0;k < n[h].elemID.length;k++) {
          }
        }
      }
    }
    "singleText" == b[c].actorElems[f].objType && (b[c].actorElems[f].objColor = jQuery(this).parent().parent().parent().find(".wp-picker-container .wp-color-picker").val(), b[c].actorElems[f].Actor.setTextFillStyle(b[c].actorElems[f].objColor));
    "singleBoxedText" == b[c].actorElems[f].objType && (b[c].actorElems[f].objColor = jQuery(this).parent().parent().parent().find(".wp-picker-container .font-color").val(), b[c].actorElems[f].textActor.setTextFillStyle(b[c].actorElems[f].objColor), b[c].actorElems[f].objBGColor = jQuery(this).parent().parent().parent().find(".wp-picker-container .bg-color").val());
    "singleText" == b[c].actorElems[f].objType && (b[c].actorElems[f].objText = jQuery(this).parent().parent().parent().find(".text-holder").val(), b[c].actorElems[f].Actor.setText(b[c].actorElems[f].objText), jQuery("#" + jQuery(this).attr("elementBind")).find("h3.handle span").html(b[c].actorElems[f].objText));
    "singleBoxedText" == b[c].actorElems[f].objType && (b[c].actorElems[f].objText = jQuery(this).parent().parent().parent().find(".text-holder").val(), b[c].actorElems[f].textActor.setText(b[c].actorElems[f].objText), jQuery("#" + jQuery(this).attr("elementBind")).find("h3.handle span").html(b[c].actorElems[f].objText), e = ta(b[c].actorElems[f].textActor.textWidth + b[c].actorElems[f].paddingH, b[c].actorElems[f].textActor.textHeight + b[c].actorElems[f].paddingV, b[c].actorElems[f].bgRadius, b[c].actorElems[f].objBGColor), 
    b[c].actorElems[f].Actor.setBackgroundImage(e), b[c].actorElems[f].textActor.centerAt((b[c].actorElems[f].textActor.textWidth + b[c].actorElems[f].paddingH) / 2, (b[c].actorElems[f].textActor.textHeight + b[c].actorElems[f].paddingV) / 2));
    b[c].actorElems[f].motionTime = 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-time").html().replace(" sec.", ""));
    b[c].actorElems[f].delayTime = 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-delay").html().replace(" sec.", ""));
    b[c].actorElems[f].scaleStart = Number(jQuery(d + " .scale-start").val());
    b[c].actorElems[f].scaleEnd = Number(jQuery(d + " .scale-end").val());
    b[c].actorElems[f].autoRotate = jQuery(d + " .autoRotate input").is(":checked");
    b[c].actorElems[f].hideBeginning = jQuery(d + " .hideElemBeginning input").is(":checked");
    b[c].actorElems[f].startAlpha = Number(jQuery(d + " .current-start-alpha").html());
    b[c].actorElems[f].endAlpha = Number(jQuery(d + " .current-end-alpha").html());
    b[c].actorElems[f].easing = u(jQuery(d + " .add-animation-easing").find(":selected").attr("element"));
    b[c].actorElems[f].easingName = jQuery(d + " .add-animation-easing").find(":selected").attr("element");
    b[c].actorElems[f].linkActive = jQuery(d + " .link-checkbox input").is(":checked");
    b[c].actorElems[f].linkActive ? (b[c].actorElems[f].objLink = jQuery(d).find(".link-holder").val(), "singleBoxedText" == b[c].actorElems[f].objType ? I(b[c].actorElems[f].Actor, b[c].actorElems[f].objLink, b[c].actorElems[f]) : I(b[c].actorElems[f].Actor, b[c].actorElems[f].objLink)) : "singleBoxedText" == b[c].actorElems[f].objType ? va(b[c].actorElems[f].Actor, b[c].actorElems[f]) : va(b[c].actorElems[f].Actor);
    0 < jQuery(d + " .outOfSceneMotion").find(":selected").length && (b[c].actorElems[f].outOfSceneMotion = jQuery(d + " .outOfSceneMotion").find(":selected").attr("element"), b[c].actorElems[f].outOfSceneTime = 1E3 * Number(jQuery(d + " .current-out-time").html()), b[c].actorElems[f].waitOnSceneTime = 1E3 * Number(jQuery(d + " .current-wait-time").html()));
  });
  jQuery(".play-current-anim-element").live("click", function() {
    f = x(jQuery(this).attr("elementBind"));
    var d = "#" + jQuery(this).attr("elementBind");
    b[c].actorElems[f].Actor.emptyBehaviorList().setRotation(0).setGlobalAlpha(!0).setScale(b[c].actorElems[f].scaleStart, b[c].actorElems[f].scaleStart).setAlpha(1 == b[c].actorElems[f].hideBeginning ? 0 : b[c].actorElems[f].startAlpha).addBehavior((new CAAT.Behavior.PathBehavior).setValues(b[c].actorElems[f].path).setDelayTime(1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-delay").html().replace(" sec.", "")), 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-time").html().replace(" sec.", 
    ""))).setCycle(!1).setAutoRotate(b[c].actorElems[f].autoRotate ? !0 : !1, b[c].actorElems[f].autoRotate ? CAAT.Behavior.PathBehavior.autorotate.FREE : !1).setInterpolator(b[c].actorElems[f].easing)).addBehavior((new CAAT.Behavior.AlphaBehavior).setValues(b[c].actorElems[f].startAlpha, b[c].actorElems[f].endAlpha).setDelayTime(1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-delay").html().replace(" sec.", "")), 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-time").html().replace(" sec.", 
    ""))).setInterpolator(b[c].actorElems[f].easing)).addBehavior((new CAAT.Behavior.ScaleBehavior).setInterpolator(b[c].actorElems[f].easing).setValues(Number(jQuery(d + " .scale-start").val()), Number(jQuery(d + " .scale-end").val()), Number(jQuery(d + " .scale-start").val()), Number(jQuery(d + " .scale-end").val())).setDelayTime(1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-delay").html().replace(" sec.", "")), 1E3 * Number(jQuery(this).parent().parent().parent().parent().find(".current-time").html().replace(" sec.", 
    ""))));
    "noMotion" != b[c].actorElems[f].outOfSceneMotion && J(b[c].actorElems[f], b[c].actorElems[f].outOfSceneMotion);
  });
  jQuery(document).on("change", ".elem_checked_for_edit", function() {
    if (jQuery(this).is(":checked")) {
      var d = jQuery(this);
      f = x(d.attr("elementBind"));
      b[c].actorElems[f].Actor.alpha = 1;
      if (b[c].actorElems[f].pathRemoved) {
        b[c].path.addSegment(b[c].actorElems[f].path);
        b[c].pa.setPath(b[c].path);
        var a = b[c].actorElems[f].path.numControlPoints();
        b[c].actorElems[f].coordsArray = [];
        for (var e = 0;e < a;e++) {
          b[c].actorElems[f].coordsArray.push(b[c].actorElems[f].path.getControlPoint(e));
        }
        b[c].actorElems[f].pathRemoved = !1;
      }
      if (0 < b[c].actorElems.length) {
        for (var g = 0;g < b[c].actorElems.length;g++) {
          if (d.attr("elementBind") != b[c].actorElems[g].elemID) {
            for (b[c].actorElems[g].Actor.alpha = .4, jQuery("#" + b[c].actorElems[g].elemID).find(".elem_checked_for_edit:checked").attr("checked", !1), b[c].actorElems[g].pathRemoved || (la(b[c].actorElems[g], b[c].actorElems[g].path), b[c].actorElems[g].pathRemoved = !0), a = b[c].actorElems[g].path.numControlPoints(), e = 0;e < a;e++) {
            }
          }
        }
      }
    } else {
      if (jQuery(this), 0 < b[c].actorElems.length) {
        for (d = 0;d < b[c].actorElems.length;d++) {
          b[c].actorElems[d].Actor.alpha = 1, jQuery("#" + b[c].actorElems[d].elemID).find(".elem_checked_for_edit:checked") && jQuery("#" + b[c].actorElems[d].elemID).find(".elem_checked_for_edit:checked").attr("checked", !1), b[c].actorElems[d].pathRemoved && (b[c].path.addSegment(b[c].actorElems[d].path), b[c].pa.setPath(b[c].path), b[c].actorElems[d].pathRemoved = !1);
        }
      }
    }
  });
  var Q = !1, ya;
  jQuery("#playBtn").live("click", function() {
    Q || (Q = !0, b[c].theScene.removeChild(b[c].pa), b[c].paRemoved = !0, K(), ya = setTimeout(function() {
      b[c].theScene.addChild(b[c].pa);
      Q = !1;
    }, 1E3 * b[c].sceneDetails.sceneDelay));
  });
  var G = !0;
  jQuery(document).on("click", "#stopAllScenesBtn", function() {
    for (var d = 0;d < b.length;d++) {
      !0 === b[d].paRemoved && (b[d].theScene.addChild(b[d].pa), b[d].paRemoved = !1);
    }
    G = !0;
    clearTimeout(ya);
    wa();
    for (d = 0;d < b[c].actorElems.length;d++) {
      b[c].actorElems[d].Actor.emptyBehaviorList();
    }
    Q = !1;
    "undefined" != typeof L && clearInterval(L);
  });
  jQuery(document).on("click", "#playAllScenesBtn", function() {
    if (G) {
      for (var c = 0;c < b.length;c++) {
        b[c].theScene.removeChild(b[c].pa), b[c].paRemoved = !0;
      }
      G = !1;
      O();
    }
  });
  var L, f = 0;
  jQuery(".actor-element").live("click", function() {
    f = x(jQuery(this).attr("id"));
  });
  var z = 0, A = 0, Na = [], B = 0, C = 0;
  jQuery("table.actor-element thead").live("click", function() {
    jQuery(this).parent().find("tbody").toggle("fast");
  });
  jQuery(document).on("click", ".switchScenes", function() {
    var d = parseInt(c) + 1;
    d >= b.length && (d = 0);
    l.easeInOut(d, b[d].sceneDetails.incomingMotion, b[d].sceneDetails.incomingAnchor, c, b[c].sceneDetails.incomingMotion, b[c].sceneDetails.incomingAnchor, 1E3 * b[c].sceneDetails.sceneTime, 1, u(b[d].sceneDetails.incomingEasing), u(b[c].sceneDetails.incomingEasing));
    c = d;
    G ? K() : (clearInterval(L), O());
  });
  jQuery(document).on("click", ".switchScenesBack", function() {
    var d = parseInt(c) - 1;
    0 > c - 1 && (d = b.length - 1);
    l.easeInOut(d, b[d].sceneDetails.incomingMotion, b[d].sceneDetails.incomingAnchor, c, b[c].sceneDetails.incomingMotion, b[c].sceneDetails.incomingAnchor, 1E3 * b[c].sceneDetails.sceneTime, 1, u(b[d].sceneDetails.incomingEasing), u(b[c].sceneDetails.incomingEasing));
    c = d;
    G ? K() : (clearInterval(L), O());
  });
})();